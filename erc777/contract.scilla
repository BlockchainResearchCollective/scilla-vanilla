(* This contract implements a fungible token interface a la ERC777.*)
(* This contract does not fire events *)


(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils

library ERC777Token 

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
    



(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ERC777Token 
(name:String ,
 symbol: String,
 totalSupply:Uint128,
 owner : ByStr20,
 granularity: Uint128)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)

field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m owner totalSupply
field allowed : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field _totalSupply: Uint128 = totalSupply
 
transition name()
  e = { _eventname : "TokenName"; TokenName : name };
  event e
end

transition symbol()
 e = { _eventname : "Symbol"; symbol : symbol };
 event e
end

transition granularity()
 msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tokenGranularity : granularity};
  msgs = one_msg msg;
  send msgs
end

transition totalSupply ()
  t<-_totalSupply;
 e = { _eventname : "TotalSupply"; totalSupply : t };
 event e
 end


transition balanceOf (tokenOwner : ByStr20)
   val <- balances[tokenOwner];
  match val with
  | Some v =>
    e = { _eventname : "BalanceOf"; owner : _owner; balance : v };
    event e
  | None =>
    e = { _eventname : "BalanceOf"; owner : _owner; balance : _zero };
    event e
  end
end


transition authorizeOperator (operator : ByStr20)
  noauth="not an operator";
  is_operator=builtin eq operator _sender;
  match is_operator with
    | True=>
       e = { _eventname : "Error"; from : _sender ; operator : operator; status : noauth };
       event e
    | False=>
       allowed[operator][_sender] := totalSupply;
       e = { _eventname : "AuthorizeOperator"; from : _sender ; operator : operator };
       event e
    end
 end



transition revokeOperator (operator : ByStr20)
    auth="revoked";
    noauth="revoke failed";
    al <- allowed;
    is_operator=builtin eq operator _sender;
    match is_operator with
    | True=>
      e = { _eventname : "Error"; from : _sender ; operator : operator; status : noauth };
      event e
    | False=>
      delete allowed[operator][_sender];
      e = { _eventname : "AuthorizeOperator"; from : _sender ; operator : operator };
      event e
      end
end


transition isOperatorFor ( operator : ByStr20, tokenHolder : ByStr20)
  is_op="Operator found";
  is_no_op="Operator found failed";
  has_operator <- exists allowed[operator][tokenHolder];
  match has_operator with
   | True =>
      e = { _eventname : "IsOperatorFor"; from : _sender ; operator : operator; tokenHolder : tokenHolder, status: is_op};
      event e
   | False =>
      e = { _eventname : "IsOperatorFor"; from : _sender ; operator : operator; tokenHolder : tokenHolder; status: is_no_op};
      event e
    end
 end


transition Send (to : ByStr20 , amount : Uint128 , _userData : String)
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notGranular="Not granular";
inSuffBal="insufficient balance";
noBal="No balance for _sender";
isMultiple=builtin eq isMultiple2 amount ;
 match  isMultiple with
  | True =>
  bal <- balances[_sender];
  match bal with
  | Some b =>
    can_do = le_int amount b;
    match can_do with
    | True =>
      (* subtract amount from _sender and add it to to *)
      new_sender_bal = builtin sub b amount;
      balances[_sender]:=new_sender_bal;
      to_bal <- balances[to];
      match to_bal with
        | Some x =>
           new_to_bal = builtin add x amount;
           balances[to] := new_to_bal;
           e = { _eventname : "SentToken"; from : _sender ; to : _to ; userData : _userData ; amount : amount   };
           event e
        | None =>
           balances[to] := amount;
           e = { _eventname : "SentToken"; from : _sender ; to : _to ; userData : _userData ; amount : amount   };
           event e
           end
    | False =>
      (* balance not sufficient. *)
       	e = { _eventname : "Error"; from : _sender ; to : _to ; userData : _userData ; amount : amount ; code : inSuffBal  };
        event e
    end
  | None =>
    (* no balance record, can't transfer *)
     e = { _eventname : "Error"; from : _sender ; to : _to ; userData : _userData ; amount : amount ; code : noBal  };
     event e
   end
   | False =>
     e = { _eventname : "Error"; from : _sender ; to : _to ; userData : _userData ; amount : amount ; code : notGranular  };
     event e
   end
end



transition operatorSend (from : ByStr20, to : ByStr20, amount : Uint128 , userData : String , operatorData : String)
bl <- balances;
al <- allowed;
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notgranular="Not granular";
isMultiple=builtin eq isMultiple2 amount ;
match isMultiple with
  | True =>
  m_disallowed = "Transfer not allowed";
  bal = builtin get bl from;
  isSender=builtin eq from _sender ;
  match isSender with
      | True=>
        send no_msg
      | False=>  
          isSender1=builtin eq to _sender ;
          match isSender1 with
      | True=>
          send no_msg
 | False=>  
  (* Check if _sender has been authorized where _sender here is an operator who can transfer from "_from" to "to" *)
  allowed_from = builtin get al _sender;
  match allowed_from with
  | Some m =>
    (* How many tokens has _sender been authorized to transfer, by "from" *)
    sender_allowed_from = builtin get m from;
    match sender_allowed_from with
    |Some m2=>
        match bal with
      | Some m3 =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int m2 m3;
      (* We can only transfer the minimum of available or authorized tokens *)
      can_do = le_int amount t;
      match can_do with
      | True =>
        (* tokens is what we should subtract from "from" and add to "to" *)
        new_from_bal = builtin sub m3 amount;
        balances_1 = builtin put bl from new_from_bal;
        balances := balances_1;
        to_bal = builtin get balances_1 to;
        match to_bal with
        | Some tb =>
          to_bal_new = builtin add tb amount;
          balances_2 = builtin put balances_1 to to_bal_new;
          balances := balances_2;
           new_allowed = builtin sub m2 amount;
        new_m = builtin put m from new_allowed;
        new_allowed = builtin put al _sender new_m;
        allowed := new_allowed;
          send no_msg
        | None =>
          (* "to" has no balance. So just set it to amount *)
          balances_3 = builtin put balances_1 to amount;
          balances := balances_3;
        new_allowed = builtin sub m2 amount;
        new_m = builtin put m from new_allowed;
        new_allowed = builtin put al _sender new_m;
        allowed := new_allowed;
          send no_msg
        end
        (* reduce "allowed" by "amount" *)
      | False =>
        msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
        msgs = one_msg msg;
        send msgs
      end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
    msgs = one_msg msg;
    send msgs
  end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
    msgs = one_msg msg;
    send msgs
  end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
    msgs = one_msg msg;
    send msgs
  end
end
end

| False =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 ; message :notgranular};
msgs = one_msg msg;
send msgs
end
end


transition Burn (amount : Uint128 , data : String)

isMultiple1= builtin div amount granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notgranular="Not granular";
insuffBal="Balance insuffuciient";
noBal="No balance record";

isMultiple=builtin eq isMultiple2 amount ;
 match  isMultiple with
  | True =>
  bl <- balances;
  bal = builtin get bl _sender;
  match bal with
  | Some b =>
    can_do = le_int amount b;
    match can_do with
    | True =>
      (* subtract amount from _sender and add it to to *)
      new_sender_bal = builtin sub b amount;
      new_balances = builtin put bl _sender new_sender_bal;
      balances := new_balances;

      t<-_totalSupply;
      _newSupply=builtin sub t amount;
      _totalSupply:=_newSupply;
      
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : _amount; data :data};
      msgs = one_msg msg;
      send msgs
    | False =>
      (* balance not sufficient. *)
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 ; data :insuffBal };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    (* no balance record, can't transfer *)
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 ; data :noBal};
    msgs = one_msg msg;
    send msgs
  end

| False =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 ; message :notgranular};
msgs = one_msg msg;
send msgs
end
end



transition operatorBurn (from : ByStr20, amount : Uint128 , userData : String , operatorData : String)

al <- allowed;
bl <- balances;
allowed_from = builtin get al _sender;
isMultiple1= builtin div amount  granularity;
isMultiple2= builtin mul isMultiple1  granularity;
notgranular="Not granular";

isMultiple=builtin eq isMultiple2 amount ;
 match  isMultiple with
  | True =>
  m_disallowed = "Transfer not allowed";
  bal = builtin get bl from;
  isSender=builtin eq from _sender ;
  match isSender with
  | True =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
    msgs = one_msg msg;
    send msgs 
  | False =>  
  (* Check if _sender has been authorized where _sender here is an operator who can transfer from "_from" to "to" *)
  match allowed_from with
  | Some m =>
    (* How many tokens has _sender been authorized to transfer, by "from" *)
    sender_allowed_from = builtin get m from;
    match sender_allowed_from with
    |Some m2=>
        match bal with
      | Some m3 =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int m2 m3;
      can_do = le_int amount t;
      match can_do with
      | True =>
        (* tokens is what we should subtract from "from"  *)
        new_from_bal = builtin sub m3 amount;
        balances_1 = builtin put bl from new_from_bal;
        balances := balances_1;

        (* total supply in circulation is also decreased  *)
       ts<-_totalSupply;
      _newSupply=builtin sub ts amount;
      _totalSupply:=_newSupply;
    
        new_allowed = builtin sub m3 amount;
        new_m = builtin put m from new_allowed;
        new_allowed = builtin put al _sender new_m;
        allowed := new_allowed
      | False =>
        msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
        msgs = one_msg msg;
        send msgs
      end
    | None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
      msgs = one_msg msg;
      send msgs
    end
     | None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
      msgs = one_msg msg;
      send msgs
    end
    | None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
      msgs = one_msg msg;
      send msgs
    end
  end


| False =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 ; message :notgranular};
msgs = one_msg msg;
send msgs
end
end







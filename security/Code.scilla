
(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils

library SecurityToken 

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}


let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end
    
let true   = Uint32 1
let false   = Uint32 0

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract SecurityToken 
(name:String ,
 symbol: String,
 totalSupply:Uint128,
 owner : ByStr20)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)
field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m owner totalSupply

field _totalSupply: Uint128 = totalSupply

  
(* Mapping from investor to their tranches (Address ->  tranche amount)*)
field tranches : Map ByStr20 (Map Uint32 Uint128) = Emp ByStr20 (Map Uint32 Uint128)
(*field tranchesLastID=Uint32 0*)
(* new ids would be tranchesLastID plus one*)



(* Mapping from (investor, tranche, operator) to approved status*)
field trancheApprovals : Map ByStr20 (Map Uint32 (Map ByStr20 Uint32)) = Emp ByStr20 (Map Uint32 (Map ByStr20 Uint32))

(* Mapping from (investor, operator) to approved status (can be used against any tranches)*)
field approvals : Map ByStr20 (Map ByStr20 Uint32) = Emp ByStr20 (Map ByStr20 Uint32)

 
 
transition name()
 msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; name : name};
  msgs = one_msg msg;
  send msgs
end

transition symbol()
 msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; symbol : symbol};
  msgs = one_msg msg;
  send msgs
end


transition totalSupply ()
  t<-_totalSupply;
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : t};
  msgs = one_msg msg;
  send msgs
 end



transition balanceOf (_owner : ByStr20)
  bl <- balances;
  val = builtin get bl _owner;
  match val with
  | Some v =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : v };
    msgs = one_msg msg;
    send msgs
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end 




(*Returns restricted token balance*)

transition balanceOfTranche ( _tranche: Uint32  ,_owner : ByStr20)
  tr <- tranches;
  val = builtin get tr _owner;
  match val with
  | Some v =>
    bl = builtin get v _tranche;
    match bl with
    | Some v1 => 
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint256 0; bal : v1 };
    msgs = one_msg msg;
    send msgs
    
    | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : Uint256 0 };
    msgs = one_msg msg;
    send msgs
    end

  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : Uint256 0 };
    msgs = one_msg msg;
    send msgs
  end
end



(* @notice Enables caller to determine the count of tranches owned by an address*)
(* @param _owner An address over which to enumerate tranches*)
(* @return The number of tranches owned by an `_owner`*)
(*transition tranchesOf(ByStr20 _owner) *)
(*s<-tranches[_owner].length;*)
(*msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tranches : s};*)
(*msgs = one_msg msg;*)
(*send msgs*)
(*end*)




(*Transfers the ownership of tokens from a specified tranche from one address to another address*)
(*@param _tranche The tranche from which to transfer tokens*)
(*@param _to The address to which to transfer tokens to*)
(*@param amount The amount of tokens to transfer from `_tranche`*)
(*@param _data Additional data attached to the transfer of tokens*)
(*@return A reason code related to the success of the send operation*)
(*@return The tranche to which the transferred tokens were allocated for the _to address*)
   
(* Transfers tokens from the sender to the _to address, keeping the _tranche the same*)
   
transition sendTranche (_tranche : Uint32, _to : ByStr20, amount:Uint128, _data:String )

v <- tranches[_sender][_tranche];
match v with
 | Some vx =>
 fromBalTranche=builtin sub vx amount;
 v1<-balances[_sender];
 match v1 with
   | Some v1x =>
   fromBal=builtin sub v1x amount;
   v2<-tranches[_to][_tranche];
   match v2 with
     | Some v2x =>
     toBalTranche=builtin add v2x amount;
     v3 <- balances[_to] ;
     match v3 with
 	| Some v3x =>
	tranches[_sender][_tranche] := fromBalTranche;
        balances[_sender] := fromBal;
        tranches[_to][_tranche] := toBalTranche;
 	toBal=builtin add v3x amount;
 	balances[_to] := toBal;
	msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
	msgs = one_msg msg;
	send msgs
	| None =>
	msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
	msgs = one_msg msg;
	send msgs
	end

    | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
    msgs = one_msg msg;
    send msgs
    end

  | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
  msgs = one_msg msg;
  send msgs
  end

| None =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
msgs = one_msg msg;
send msgs
end

end


(* returns (address[])*)

transition defaultOperators ()
(* No default operators*)
     msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; default : owner};
     msgs = one_msg msg;
     send msgs
end


transition defaultOperatorsTranche (_tranche:String)
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; default : owner};
    msgs = one_msg msg;
    send msgs
end

transition authorizeOperator ( operator : ByStr20)
  approvals[_sender][operator] := true;
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; authorized : Uint128 1  };
  msgs = one_msg msg;
  send msgs
end



transition revokeOperator ( operator : ByStr20)
  approvals[_sender][operator] := false;
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; unauthorized : Uint128 1  };
  msgs = one_msg msg;
  send msgs
end


transition operatorSendTranche (_tranche : Uint32,_from : ByStr20, _to : ByStr20, amount:Uint128, _data:String, _operatorData:String )
    
   
v <- tranches[_from][_tranche];
match v with
 | Some vx =>
 fromBalTranche=builtin sub vx amount;
 v1<-balances[_from];
 match v1 with
   | Some v1x =>
   fromBal=builtin sub v1x amount;
   v2<-tranches[_to][_tranche];
   match v2 with
     | Some v2x =>
     toBalTranche=builtin add v2x amount;
     v3 <- balances[_to] ;
     match v3 with
 	| Some v3x =>
	tranches[_from][_tranche] := fromBalTranche;
        balances[_from] := fromBal;
        tranches[_to][_tranche] := toBalTranche;
 	toBal=builtin add v3x amount;
 	balances[_to] := toBal;
	msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
	msgs = one_msg msg;
	send msgs
	| None =>
	msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
	msgs = one_msg msg;
	send msgs
	end

    | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
    msgs = one_msg msg;
    send msgs
    end

  | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
  msgs = one_msg msg;
  send msgs
  end

| None =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
msgs = one_msg msg;
send msgs
end

end




transition authorizeOperatorTranche ( _operator : ByStr20,_tranche:Uint32 )
trancheApprovals[_sender][_tranche][_operator] := true;
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; unauthorized : Uint128 1  };
msgs = one_msg msg;
send msgs
end



transition revokeOperatorTranche ( _operator : ByStr20,_tranche:Uint32 )
trancheApprovals[_sender][_tranche][_operator] := false;
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; unauthorized : Uint128 1  };
msgs = one_msg msg;
send msgs
end



transition isOperatorFor ( _operator : ByStr20, _owner : ByStr20 )
tr<-approvals[_owner][_operator];
match tr with
 | Some v =>
 msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tranche : true };
 msgs = one_msg msg;
 send msgs
 | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tranche : false };
  msgs = one_msg msg;
  send msgs
  end
end



transition isOperatorForTranche ( _tranch : Uint32, _operator : ByStr20, _owner : ByStr20 )
tr<-trancheApprovals[_owner][_tranch][_operator];
match tr with
 | Some v =>
 msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tranche : true };
 msgs = one_msg msg;
 send msgs
 | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; tranche : false };
  msgs = one_msg msg;
  send msgs
  end
end


transition burn (_tranche:Uint32,_owner:ByStr20,amount : Uint128 , _data : String)
v <- tranches[_sender][_tranche];
match v with
 | Some vx =>
 fromBalTranche=builtin sub vx amount;
 v1<-balances[_sender];
 match v1 with
   | Some v1x =>
   fromBal=builtin sub v1x amount;
   tranches[_sender][_tranche] := fromBalTranche;
   balances[_sender] := fromBal;
   t<-_totalSupply;
   newSupply=builtin sub t amount;
   _totalSupply:= newSupply;

   msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
   msgs = one_msg msg;
   send msgs
	

  | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
  msgs = one_msg msg;
  send msgs
  end

| None =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
msgs = one_msg msg;
send msgs
end

end



transition mint (_tranche:Uint32,_owner:ByStr20,amount : Uint128 , _data : String)
v <- tranches[_sender][_tranche];
match v with
 | Some vx =>
 fromBalTranche=builtin add vx amount;
 v1<-balances[_sender];
 match v1 with
   | Some v1x =>
   fromBal=builtin add v1x amount;
   tranches[_sender][_tranche] := fromBalTranche;
   balances[_sender] := fromBal;
   t<-_totalSupply;
   newSupply=builtin add t amount;
   _totalSupply:= newSupply;

   msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
   msgs = one_msg msg;
   send msgs
	

  | None =>
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
  msgs = one_msg msg;
  send msgs
  end

| None =>
msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; error : Uint256 0 };
msgs = one_msg msg;
send msgs
end

end




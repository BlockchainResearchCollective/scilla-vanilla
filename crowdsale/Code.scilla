(* CrowdSale contract *)

import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library CrowdSale

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg


(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract CrowdSale
(_wallet: ByStr20,
_rate: Uint256 )

  (* How many token units a buyer gets per wei.*)
  (* The rate is the conversion between wei and the smallest and indivisible token unit.*)
  (* So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK*)
  (* 1 wei will give you 1 unit, or 0.001 TOK.*)

field _weiRaised: Uint256 = 0
field no_of_tokens: Uint256=0


transition wallet()
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; wallet : _wallet};
    msgs = one_msg msg;
    send msgs


(* @return the number of token units a buyer gets per wei.*)
transition rate()
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; rate : _rate};
    msgs = one_msg msg;
    send msgs



  (*@return the amount of wei raised.*)
transition weiRaised()
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; weiRaised : _weiRaised};
    msgs = one_msg msg;
    send msgs



transition buyTokens( beneficiary: ByStr20) {
    
    weiAmount = _amount;

    
   // update state
    weiRaised = weiRaised.add(weiAmount);

      
 
 }

 

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils ListUtils 

library Randao 

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let blk_leq =
  fun (blk1 : Option BNum) =>
  fun (blk2 : BNum) =>
  match blk1 with
    | None => False
    | Some bl1 => 
      let bc1 = builtin blt bl1 blk2 in 
      let bc2 = builtin eq bl1 blk2 in 
      orb bc1 bc2
 end

let blk_geq =
  fun (blk1 : Option BNum) =>
  fun (blk2 : BNum) =>
  match blk1 with
    | None => False
    | Some bl1 => 
      let bc1 = builtin blt blk2 bl1 in 
      let bc2 = builtin eq bl1 blk2 in 
      orb bc1 bc2
 end

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      builtin eq a b 
      end
   

let le_int_opt =
  fun (a : Uint128) => fun (b : Option Uint128) =>
    match b with 
    | None => False
    | Some b1 => 
      let x = builtin lt a b1 in
      match x with
      | True => True
      | False =>
        builtin eq a b1 
        end
    end

let eq_one =
  fun (a : Option Uint32) => 
    match a with 
    | None => False
    | Some a1 => 
      let _one = Uint32 1 in
      builtin eq a1 _one 
    end

let eq_opt_128 =
  fun (a : Option Uint32) =>  fun (b : Uint128) =>
    match a with 
    | None => False
    | Some a1 => 
      builtin eq a1 _one 
    end
   
let in_time =
  fun (bn1 : Option BNum) =>
  fun (bn2 : Option BNum) =>
  fun (bn : BNum) =>
        let d = builtin blt bn1 bn in
        match d with
      | False => False
      | True => 
          let bc1 = builtin blt bn bn2 in 
          let bc2 = builtin eq bn bn2 in 
          orb bc1 bc2
       end     

let checkAlive=
  fun (bn1 : BNum) =>
  fun (bn2 : Uint32) =>
  fun (bn : BNum) =>
      let bc1 = builtin badd bn1 bn2 in 
      builtin blt bc1 bn
        
let addOne =
fun (a : Uint128) =>
    let z = Uint128 0 in
      let _one = Uint128 1 in
      builtin add a _one


(*Constants*)
let zero_128   = Uint128 0
let one_128   = Uint128 1
let zero_32   = Uint32 0
let one_32   = Uint32 1

(* Error events *)
let mk_error_event =
  fun (err_code : Int32) =>
    { _eventname : "RandaoError" ; err_code : err_code }

(* Error messages *)
let insufficient_deposit_err_code = Int32 -1
let commit_time_err_code  = Int32 -2
let compaign_unended_err_code = Int32 -3
let not_reveal_deadline_err_code = Int32 -4
let not_committed_err_code = Int32 -5
let reveal_time_err_code = Int32 -6
let deadline_err_code = Int32 -7
let failure_err_code = Int32 -8
let failure_wrong_secret = Int32 -9
let bounty_unequal_err_code = Int32 -10
let not_founder_err_code = Int32 -11
let bounty_not_funded_err_code = Int32 -12
let sender_already_committed_err_code = Int32 -13


(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Randao 
( founder : ByStr20 )

(*_deposit is _amount of zil required to send to take part in commit phase*)
(*commitBalkline is the Bnum when the commit phase starts*)
(*commitDeadline is the Bnum when the commit phase ends*)
(*bnum is the Bnum when the reveal phase ends*)
(*between commitDeadline and bnum is the reveal phase*)
(*so commitBalkline < commitDeadline < bnum*)

field _deposit : Map Uint32 Uint128 = Emp Uint32 Uint128
field _commitBalkline: Map Uint32 BNum  = Emp Uint32 BNum
field _commitDeadline:  Map Uint32 BNum  = Emp Uint32 BNum
field _bnum: Map Uint32 BNum  = Emp Uint32 BNum
field _aliveTime: Map Uint32 Uint32  = Emp Uint32 Uint32
field _minParticipant : Map Uint32 Uint128 = Emp Uint32 Uint128

(*address, commitment (i.e. sha256 hash of secret), secret *)
field participant :Map Uint32(Map ByStr20( Map ByStr32 Uint128 )) = Emp Uint32(Map ByStr20(Map ByStr32  Uint128 ))
(*secret is initialized to zero in mapping*)

(*mapping for if address has revealed secret in reveal phase and is eligible for bounty*)
field revealed : Map Uint32(Map ByStr20 Uint32) = Emp Uint32 (Map ByStr20 Uint32) 

(*mapping for if address has been rewarded*)
field rewarded: Map Uint32 (Map ByStr20 Uint32) = Emp Uint32 (Map ByStr20 Uint32) 

(*balance of Consumer in zil*)

field _consumer : Map Uint32 (Map ByStr20 Uint128) = Emp Uint32 (Map ByStr20 Uint128)

field commitNum : Map Uint32 Uint128 = Emp Uint32 Uint128
(*equal to zero at initialisation*)

field revealsNum : Map Uint32 Uint128 = Emp Uint32 Uint128
(*equal to zero at initialisation*)

field rewardNum : Map Uint32 Uint128 = Emp Uint32 Uint128
(*equal to zero at initialisation*)

(*random number is generated after reveal phase is over, initializes to zero*) 
field random: Map Uint32 Uint128 = Emp Uint32 Uint128

(*is paused until it is funded*)
field paused : Map Uint32 Uint32 = Emp Uint32 Uint32



(*deposit of bounty by consumer and set compaign*)
transition setCompaign ( compaignId: Uint32, deposit : Uint128, commitBalkline : BNum, commitDeadline : BNum, bnum : BNum, minParticipant : Uint128)
blk <- & BLOCKNUMBER;
accept;
paused[compaignId]:=zero_32;
commitNum[compaignId]:=zero_128;
revealsNum[compaignId]:=zero_128;
rewardNum[compaignId]:=zero_128;
random[compaignId]:=zero_128;
_consumer[compaignId][_sender] := _amount;
_deposit[compaignId] := deposit;
_commitBalkline[compaignId] := commitBalkline; 
_commitDeadline[compaignId] := commitDeadline;
_bnum[compaignId] := bnum;
_minParticipant[compaignId] := minParticipant;
e = { _eventname : "Compaign Created"; deposit : deposit; bounty : _amount;  commitBalkline : commitBalkline; commitDeadline : commitDeadline; bnum : bnum; minParticipant : minParticipant };
event e
end

(*commit sha256 hash (of secret) in commit phase*)
transition commit (compaignId : Uint32, _hs : ByStr32 )
(*if bounty is funded isPaused is false (0) *)
p <- paused[compaignId];
cn<- commitNum[compaignId];
isPaused = eq_one p;
d <- _deposit[compaignId];
isEqualDeposit= eq_opt_128 d _amount;
blk <- & BLOCKNUMBER;
cb<-_commitBalkline[compaignId];
cd<-_commitDeadline[compaignId];
inTime = in_time cb cd blk;




match isPaused with 
  | False =>
     match isEqualDeposit with
     | True =>
        match inTime with
        | True =>
           p<-exists participant[one_32][_sender];
	   match p with
	      | True =>
     		 e = mk_error_event sender_already_committed_err_code;
  		 event e 
 	      | False =>
  	         accept;	    
 	         participant[one_32][_sender][_hs]:=zero_128;
                 revealed[one_32][_sender]:=zero_32;
	         rewarded[one_32][_sender]:=zero_32;
                 newCommitNum=addOne cn;
                 commitNum[compaignId]:=newCommitNum;
	         e = { _eventname : "LogCommit"; from : _sender ; commitment : _hs  };
	         event e
	         end
       | False => 
          e = mk_error_event commit_time_err_code;
          event e 
          end
    | False =>
      e = mk_error_event insufficient_deposit_err_code;
      event e 
      end
  | True =>
    e = mk_error_event bounty_not_funded_err_code;
    event e 
    end
end


(*returns commitment, sha256 hash of _sender*)
transition getCommitment (compaignId : Uint32)
valMap <- participant[compaignId][_sender];
match valMap with
  | Some v =>
    val=builtin to_list v;
    match val with 
      | Cons h t => 
         match h with
           | Pair a b => 
              e = { _eventname : "Commitment"; commitment : a  };
              event e
              end
      | Nil =>
   	 e = mk_error_event not_committed_err_code;
 	 event e 
	 end
  | None=>
    e = mk_error_event not_committed_err_code;
    event e 
    end
end


(*reveal secret in reveal phase of commitment*)
transition reveal(compaignId:Uint32, _s : Uint128)
cn<-commitNum[compaignId];
cd<-_commitDeadline[compaignId];
bn<-_bnum[compaignId];
blk <- & BLOCKNUMBER;
(*inTime if true signifies that blk lies in commitDeadline and _bnum i.e. in phase2*)
mp<-_minParticipant[compaignId];
isMinParticipants = le_int_opt mp cn;
inTime = in_time cd bn blk;
match isMinParticipants with
  | True =>
    match inTime with
      | True =>
        commit= builtin sha256hash _s;
        val1 <- participant[compaignId][_sender][commit];
            match val1 with
 	      | Some v6 =>
	        rn<-revealsNum;
                newRevealNum=addOne rn;
                revealsNum:=newRevealNum;
                (*generate random no.*)
	        prRandom<-random;
                match prRandom with 
 	          | Some previousRandom =>
	            newRandom=builtin add previousRandom _s;
                    random:=newRandom;	
	            participant[compaignId][_sender][commit] := _s;
	            revealed[compaignId][_sender]:=one_32;
                    e = { _eventname : "LogReveal"; from : _sender  ; secret : _s  };
	            event e 
	         | None =>
                   newRandomNumOpt = Some {Uint128} _s;
                   random:=newRandomNumOpt;	
	           participant[compaignId][_sender][commit] := _s;
	           revealed[compaignId][_sender]:=one_32;
                   e = { _eventname : "LogReveal"; from : _sender  ; secret : _s  };
	           event e 
  	           end
	    | None =>
  	      e = mk_error_event failure_wrong_secret;
	      event e
	      end
      | False => 
        e = mk_error_event reveal_time_err_code;
       event e 
       end
   | False => 
     hash <- exists participant [compaignId][_sender];
     match hash with
       | True =>
         depo<-_deposit;
         msg = { _tag : "Main"; _recipient : _sender; _amount : depo; status : "Failed compaign and refunded deposit as minParticipants < total commits" };
         msgs = one_msg msg;
         send msgs
       | False =>
	 isConsumer= builtin eq founder _sender;
         match isConsumer with
           | True =>
              bounty<-_consumer[compaignId][_sender];
                   msg = { _tag : "Main"; _recipient : _sender; _amount : bounty; status : "Failed compaign and refunded deposit as minParticipants < total commits" };
                   msgs = one_msg msg;
                   send msgs
           | False =>
  	      e = mk_error_event failure_err_code;
  	      event e 
  	    end
       end      
    end
end


(*to get the reward after reveal phase is over*)
transition getMyBounty(compaignId: Uint32)
blk <- & BLOCKNUMBER;
bn <- _bnum[compaignId];
isEnd = blk_leq bn blk;
deposit <- _deposit[compaignId];
revealno <- revealsNum[compaignId];
commitno <- commitNum[compaignId];
rewardno<-rewardNum[compaignId];
bnty<-_consumer[compaignId][sdsd];
match isEnd with
  | True =>
  isRevealed<-revealed[compaignId][_sender];
  match isRevealed with
    |Some rv =>
    hasRevealed=builtin eq rv one_32;
    match hasRevealed with
      |True =>
      isRewarded<-rewarded[compaignId][_sender];
      match isRewarded with
        |Some rv1 =>
        hasRewarded=builtin eq rv1 one_32;
        match hasRewarded with
          |False =>
	     diffRevealed = sub_opt commitno revealno;
             fine = builtin mul diffRevealed deposit;
	     distributionShare = div_opt bnty revealno;
             distributionAmount = builtin add fine distributionShare;
	       founderAmt = builtin sub bnty distributionShare;
	       _bounty := founderAmt;
	       totalReward = builtin add distributionAmount deposit;
 	       senderAmt = totalReward;
               rewarded[one_32][_sender] := one_32; 
               newRewardNum= addOne rewardno;
	       rewardNumOpt=Some {Uint128} newRewardNum;
               rewardNum:=rewardNumOpt;
               msg = { _tag : "Main"; _recipient : _sender; _amount : totalReward; status : "success" };
	       msgs = one_msg msg;
	       send msgs     
  	 |True =>
  	    e = mk_error_event failure_err_code;
            event e 
            end 
      |None=>
        e = mk_error_event failure_err_code;
        event e 
        end 
    |False=>
      e = mk_error_event not_reveal_deadline_err_code;
      event e 
      end 
  |None=>
    e = mk_error_event not_committed_err_code;
    event e 
    end 
|False =>
  e = mk_error_event not_reveal_deadline_err_code;
  event e 
  end 
end


(*random no. generated by contract*)
transition getRandom ()
blk <- & BLOCKNUMBER;
bn<-_bnum[compaignId];
mp<-_minParticipant[compaignId];
isEnd=blk_leq bn blk;
r<-revealsNum[compaignId];
rn<-random[compaignId];
isConsumer= builtin eq _sender founder;
match isConsumer with
| True =>
  match isEnd with
  | True =>
    isSettled= le_int_opt mp r;
    match isSettled with
     | True =>
       match rn with 
         | Some random =>
            e = { _eventname : "RandomNumber" ; number : random  };
            event e
         | None =>
            e = mk_error_event failure_err_code;
            event e 
            end
    | False =>
      e = mk_error_event failure_err_code;
      event e 
      end
  | False =>
    e = mk_error_event deadline_err_code;
    event e 
    end
| False =>
   e = mk_error_event not_founder_err_code;
   event e 
   end
end

